{"version":3,"sources":["logo.svg","Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","winnerCombinations","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cells","Array","fill","winner","currentTurn","markCell","bind","assertThisInitialized","value","index","newWinner","_this$state","currentSign","checkWinner","setState","prevState","_i","length","combination","_combination","slicedToArray","index1","index2","index3","_this2","_this$state2","stylesForWinMessage","display","stylesForCurrentTurnMessage","react_default","a","createElement","className","style","map","cell","key","onClick","fillCells","concat","restartGame","React","Component","App","src_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8d2c98d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nconst winnerCombinations = [\r\n  [0, 1, 2],\r\n  [0, 3, 6],\r\n  [0, 4, 8],\r\n  [1, 4, 7],\r\n  [2, 4, 6],\r\n  [2, 5, 8],\r\n  [3, 4, 5],\r\n  [6, 7, 8]\r\n];\r\n\r\nclass Game extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cells: Array(9).fill(null),\r\n      winner: null,\r\n      currentTurn: 1\r\n    }\r\n    this.markCell = this.markCell.bind(this);\r\n  }\r\n\r\n  fillCells(value) {\r\n    return value || '';\r\n  }\r\n\r\n  markCell(index) {\r\n    const { winner, currentTurn, cells } = this.state;\r\n    let newWinner;\r\n\r\n    if (cells[index] !== null) return;\r\n    if (winner) return;\r\n\r\n    const currentSign = currentTurn % 2 === 1 ? 'X' : 'O';\r\n    cells[index] = currentSign;\r\n\r\n    newWinner = this.checkWinner(cells);\r\n\r\n    if (currentTurn === 9 && newWinner === null) {\r\n      newWinner = 'Draw';\r\n    }\r\n\r\n    this.setState((prevState) => {\r\n      return {\r\n        cells: cells,\r\n        winner: newWinner,\r\n        currentTurn: prevState.currentTurn + 1\r\n      }\r\n    });\r\n  }\r\n\r\n  checkWinner(cells) {\r\n    for (let combination of winnerCombinations) {\r\n      let [index1, index2, index3] = combination;\r\n\r\n      if ( cells[index1] !== null && \r\n        cells[index1] === cells[index2] && \r\n        cells[index2] === cells[index3] ) {\r\n          return cells[index1];\r\n      };\r\n    };\r\n    return null;\r\n  }\r\n\r\n  restartGame() {\r\n    this.setState(prevState => {\r\n      return {\r\n        cells: Array(9).fill(null),\r\n        winner: null,\r\n        currentTurn: 1\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { cells, winner, currentTurn } = this.state;\r\n\r\n    const stylesForWinMessage = {\r\n      display: \"none\"\r\n    };\r\n    winner && ( stylesForWinMessage.display = \"block\" );\r\n\r\n    const stylesForCurrentTurnMessage = {\r\n      display: \"block\"\r\n    }\r\n    winner && ( stylesForCurrentTurnMessage.display = \"none\" );\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"current-turn\" style={stylesForCurrentTurnMessage}>\r\n          The <span> { (currentTurn % 2 === 1 ) ? `first (X)`: `second (O)` }\r\n          </span> player&#39;s turn\r\n        </div>\r\n        <div className=\"field\">\r\n          { cells.map((cell, index) => (\r\n            <div \r\n            key={index} \r\n            className=\"field__cell\" \r\n            onClick={() => this.markCell(index)}\r\n            >{ this.fillCells(cell) }</div>\r\n          )) }\r\n        </div>\r\n        <div className=\"result\" style={stylesForWinMessage}>\r\n          { winner !== 'Draw' ?\r\n           `The winner is ${ winner === 'X' ? 'Player 1 (X)' : 'Player 2 (O)'}` \r\n           : 'Draw'\r\n          }\r\n        </div>\r\n        <div \r\n        className=\"restart-btn\"\r\n        onClick={() => this.restartGame()}\r\n        >Restart</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Game from './Game'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}